#define NUM_ROWS 28  // Number of rows in the zigzag layout
#define NUM_COLS 20  // Number of columns in the zigzag layoutBLA

#define ENTER_A_PIN 30  // Digital pin ENTER BUTTON A
#define ENTER_B_PIN 32  // Digital pin ENTER BUTTON B
int enterA = 0;
int enterB = 0;

int startFrame = 0;
int frame = 0;

const CRGB BLACK = CRGB(0x000000);
const CRGB CYAN = CRGB(0xa8f0ff);


void menuSetup() {
  pinMode(ENTER_A_PIN, INPUT);  // Set the button pin as input with a pull-up resistor
  pinMode(ENTER_B_PIN, INPUT);  // Set the button pin as input with a pull-up resistor
}



CRGB colors[NUM_ROWS][NUM_COLS] = {
  // Define your first frame (20x2) color codes here...
  // Format: {0xRRGGBB, 0xRRGGBB, ...} for each row
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff53ff, 0x000000, 0x000000, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0x000000, 0x000000},
{0x000000, 0x000000, 0xa8f0ff, 0x000000, 0x000000, 0x000000, 0xff53ff, 0xff53ff, 0xff53ff, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0xff53ff, 0x000000, 0xff53ff, 0xa8f0ff, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0xa8f0ff, 0xa8f0ff, 0x000000, 0xff53ff, 0x000000, 0xff53ff, 0xa8f0ff, 0x000000, 0xa8f0ff, 0xff53ff, 0x000000, 0xff53ff, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa8f0ff, 0xff53ff, 0x000000, 0xff53ff, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0xff53ff, 0xff53ff, 0x000000, 0xa8f0ff, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0x000000, 0xff53ff, 0x000000, 0xff53ff, 0xa8f0ff, 0x000000, 0xa8f0ff, 0xff53ff, 0x000000, 0xff53ff, 0xa8f0ff, 0xa8f0ff, 0xa8f0ff, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0xffffff, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x000000, 0x000000, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x000000},
{0x000000, 0x5353ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x5353ff, 0x000000, 0x000000, 0x5353ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd966, 0x5353ff, 0x000000},
{0x000000, 0x5353ff, 0x000000, 0xff0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x5353ff, 0x000000, 0x000000, 0x5353ff, 0x000000, 0x000000, 0xff0000, 0x000000, 0xff53ff, 0x000000, 0x5353ff, 0x000000},
{0x000000, 0x5353ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x5353ff, 0x000000, 0x008000, 0x5353ff, 0xa8f0ff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x5353ff, 0x000000},
{0x000000, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x000000, 0x008000, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x5353ff, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0xffd966, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0xffd966, 0xffd966, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0xffd966, 0x000000, 0xffd966, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0xffd966, 0x000000, 0xffd966, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0xffd966, 0xffd966, 0xffd966, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0xffd966, 0xffd966, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0xffd966, 0x000000, 0xffd966, 0x000000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd966, 0x000000, 0xffd966, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0xffd966, 0x000000, 0xffd966, 0x000000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0xffd966, 0xffd966, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
{0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000, 0x008000},
  // Define hex codes for the first frame for all rows and columns
};

void loop() {
  frame = getFrameState();
  // SNAKE VERSION 1
  if (frame == 1 || frame == 2) {
    gameLoop();  
  }

  //START MENU FRAME
  if (frame == 0) {
    // renderSolidScreen();
    initGesure();
    enterA = digitalRead(ENTER_A_PIN);
    enterB = digitalRead(ENTER_B_PIN);
    if (enterA) {
      resetStr();
      setFrameState(1);
      // sendMP3Command('4');
      sendMP3Command('5');
      setGameMode1(true);
      renderEmptyScreen();
    } else if (enterB) {
      resetStr();
      setFrameState(2);
      // sendMP3Command('4');
      sendMP3Command('5');
      setGameMode1(false);
      renderEmptyScreen();

    }

    // Display the current frame on the LED strip
    for (int row = 0; row < NUM_ROWS; row++) {
      if (row % 2 == 0) {
        // Even rows (left to right)
        for (int col = 0; col < NUM_COLS; col++) {
          leds[row * NUM_COLS + col] = colors[row][col] ;
        }
      } else {
        // Odd rows (right to left)
        for (int col = 0; col < NUM_COLS; col++) {
          leds[row * NUM_COLS + (NUM_COLS - 1 - col)] =  colors[row][col] ;
        }
      }
    }
  }

  FastLED.show();
}
void setFrameState(int i) {
  frame = i;
}

int getFrameState() {

  return frame;
}
